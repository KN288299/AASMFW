name: Build iOS Release IPA (No Sign)

on:
  workflow_dispatch:
    inputs:
      skip_cache:
        description: '跳过缓存(true/false)'
        required: false
        default: 'false'
      skip_bundle:
        description: '跳过预构建Bundle(true/false)'
        required: false
        default: 'false'

env:
  NODE_OPTIONS: "--max_old_space_size=8192"
  CI: true
  # 显式禁用新架构
  RCT_NEW_ARCH_ENABLED: "0"
  USE_HERMES: "0"
  # 不再需要禁用RNPermissions自动链接，3.x版本不需要这个设置
  # RN_PERMISSIONS_DISABLE_AUTOLINKING: "1"

jobs:
  build:
    runs-on: macos-13
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置版本号
        id: version
        run: |
          VERSION=$(node -e "console.log(require('./package.json').version)")
          BUILD_NUMBER=$(date +%Y%m%d%H%M)
          echo "APP_VERSION=$VERSION" >> $GITHUB_ENV
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
          echo "构建版本: $VERSION ($BUILD_NUMBER)"

      - name: 显示 Xcode 版本
        run: xcodebuild -version

      - name: 环境检查
        run: |
          echo "Node版本: $(node -v)"
          echo "NPM版本: $(npm -v)"
          echo "Yarn版本: $(yarn -v)"
          echo "CocoaPods版本: $(pod --version)"
          echo "系统信息: $(sw_vers)"
          echo "工作目录: $(pwd)"
          ls -la
          
          # 检查react-native-permissions版本
          PERMISSIONS_VERSION=$(node -e "console.log(require('./package.json').dependencies['react-native-permissions'])")
          echo "React Native Permissions版本: $PERMISSIONS_VERSION"

      - name: 缓存 node_modules
        id: cache-node-modules
        if: ${{ inputs.skip_cache != 'true' }}
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: 设置 yarn registry 为 npmjs
        run: yarn config set registry https://registry.npmjs.org/

      - name: 安装依赖
        if: ${{ steps.cache-node-modules.outputs.cache-hit != 'true' || inputs.skip_cache == 'true' }}
        run: |
          echo "=== 安装Node依赖 ==="
          START_TIME=$(date +%s)
          yarn install --network-timeout 300000
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "Node依赖安装完成，耗时: ${DURATION}秒"

      # 移除SVG步骤，因为已不再使用

      - name: 清除旧的Pods和构建文件
        run: |
          echo "=== 清理旧的构建文件和Pods ==="
          cd ios
          rm -rf Pods
          rm -rf Podfile.lock
          rm -rf ~/Library/Developer/Xcode/DerivedData
          rm -rf build
          pod cache clean --all
          mkdir -p build
          chmod -R 755 .
      
      # 其他修复步骤保持不变...

      - name: 配置React Native Permissions（简化版）
        run: |-
          echo "=== 配置React Native Permissions - 简化配置 ==="
          
          # 检查react-native-permissions版本
          PERMISSIONS_VERSION=$(node -e "console.log(require('./package.json').dependencies['react-native-permissions'] || 'undefined')")
          echo "检测到React Native Permissions版本: $PERMISSIONS_VERSION"
          
          # 确保我们使用的是3.x版本
          if [[ "$PERMISSIONS_VERSION" == *"3."* ]]; then
            echo "✅ 使用3.x版本的React Native Permissions，无需复杂修复"
          else
            echo "⚠️ 警告：非3.x版本的React Native Permissions可能需要额外修复"
          fi
          
          # 为了安全起见，确保Podfile配置正确
          cd ios
          
          # 备份原始Podfile
          cp Podfile Podfile.backup
          
          # 检查并修改Podfile（如果需要）
          if ! grep -q "RCT_NEW_ARCH_ENABLED.*0" Podfile; then
            echo "修改Podfile以确保禁用新架构..."
            echo "# 确保禁用新架构 - 自动添加" >> Podfile
            echo "ENV['RCT_NEW_ARCH_ENABLED'] = '0'" >> Podfile
          else
            echo "✅ Podfile已正确配置新架构设置"
          fi
          
          echo "✅ React Native Permissions配置完成"

      - name: 安装CocoaPods依赖
        run: |
          cd ios
          echo "=== 开始安装CocoaPods依赖 ==="
          START_TIME=$(date +%s)
          
          # 配置git以处理大仓库
          git config --global http.lowSpeedLimit 0
          git config --global http.lowSpeedTime 999999
          
          # 确保环境变量设置正确
          export RCT_NEW_ARCH_ENABLED=0
          export USE_HERMES=0
          
          # 尝试3次安装pods
          for i in {1..3}; do
            echo "=== 尝试 $i: 安装 pods... ==="
            pod install --verbose && break
            echo "=== 尝试 $i 失败，重试中... ==="
            if [ $i -eq 3 ]; then
              echo "❌ 安装CocoaPods失败，已达到最大重试次数"
              exit 1
            fi
            sleep 10
          done
          
          # 检查安装结果
          if [ ! -d "Pods" ]; then
            echo "❌ 错误: Pods目录不存在，安装失败"
            exit 1
          else
            END_TIME=$(date +%s)
            DURATION=$((END_TIME - START_TIME))
            echo "✅ CocoaPods依赖安装成功，耗时: ${DURATION}秒"
            ls -la
          fi

      - name: 修复react-native-safe-area-context重复头文件问题
        run: |
          echo "=== 修复react-native-safe-area-context重复头文件问题 ==="
          cd ios
          
          # 从Pods项目清理重复的头文件引用
          if [ -d "Pods" ]; then
            echo "删除生成的头文件..."
            rm -rf "../node_modules/react-native-safe-area-context/ios/build/generated"
            
            # 如果build目录为空，完全删除它以防止混淆
            if [ -z "$(ls -A ../node_modules/react-native-safe-area-context/ios/build 2>/dev/null)" ]; then
              rm -rf "../node_modules/react-native-safe-area-context/ios/build"
            fi
            
            echo "✅ 完成清理生成的头文件"
          else
            echo "⚠️ 警告: Pods目录不存在，请先运行pod install"
          fi
          
          cd ..

      - name: 深度修复react-native-safe-area-context
        run: |
          echo "=== 深度修复react-native-safe-area-context Fabric依赖问题 ==="
          SAFE_AREA_DIR="node_modules/react-native-safe-area-context"
          
          if [ -d "$SAFE_AREA_DIR" ]; then
            # 完全重写RNCSafeAreaContext.mm，移除所有Fabric代码
            MM_FILE="$SAFE_AREA_DIR/ios/RNCSafeAreaContext.mm"
            if [ -f "$MM_FILE" ]; then
              cp "$MM_FILE" "${MM_FILE}.original"
              
              # 使用echo命令创建简化版本
              echo '#import "RNCSafeAreaContext.h"' > "$MM_FILE"
              echo '#import <React/RCTBridge.h>' >> "$MM_FILE"
              echo '#import <React/RCTUIManager.h>' >> "$MM_FILE"
              echo '' >> "$MM_FILE"
              echo '@implementation RNCSafeAreaContext' >> "$MM_FILE"
              echo '' >> "$MM_FILE"
              echo 'RCT_EXPORT_MODULE()' >> "$MM_FILE"
              echo '' >> "$MM_FILE"
              echo '+ (BOOL)requiresMainQueueSetup' >> "$MM_FILE"
              echo '{' >> "$MM_FILE"
              echo '  return YES;' >> "$MM_FILE"
              echo '}' >> "$MM_FILE"
              echo '' >> "$MM_FILE"
              echo '@end' >> "$MM_FILE"
              
              echo "✅ 已重写 RNCSafeAreaContext.mm 为简化版本"
            fi
            
            # 修改RNCSafeAreaContext.h文件
            H_FILE="$SAFE_AREA_DIR/ios/RNCSafeAreaContext.h"
            if [ -f "$H_FILE" ]; then
              cp "$H_FILE" "${H_FILE}.original"
              
              # 使用echo命令创建简化版本
              echo '#import <React/RCTBridgeModule.h>' > "$H_FILE"
              echo '#import <React/RCTEventEmitter.h>' >> "$H_FILE"
              echo '' >> "$H_FILE"
              echo '@interface RNCSafeAreaContext : RCTEventEmitter <RCTBridgeModule>' >> "$H_FILE"
              echo '@end' >> "$H_FILE"
              
              echo "✅ 已重写 RNCSafeAreaContext.h 为简化版本"
            fi
          else
            echo "⚠️ 找不到 react-native-safe-area-context 目录"
          fi

      - name: 预构建React Native Bundle
        if: ${{ inputs.skip_bundle != 'true' }}
        run: |
          echo "=== 预构建React Native Bundle 以确保打包脚本正确 ==="
          START_TIME=$(date +%s)
          mkdir -p ios/bundle
          npx react-native bundle \
            --entry-file index.js \
            --platform ios \
            --dev false \
            --bundle-output ios/bundle/main.jsbundle \
            --assets-dest ios/bundle
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "✅ Bundle构建完成，耗时: ${DURATION}秒"

      - name: 修复React Native打包脚本
        run: |
          echo "=== 修复React Native打包脚本 ==="
          SCRIPT_PATH="node_modules/react-native/scripts/react-native-xcode.sh"
          if [ -f "$SCRIPT_PATH" ]; then
            # 备份原始文件
            cp "$SCRIPT_PATH" "${SCRIPT_PATH}.bak"
            
            # 修改脚本增加更多日志输出和错误处理
            sed -i '' 's/set -e/set -ex/' "$SCRIPT_PATH"
            
            # 尝试修复NODE_BINARY问题
            sed -i '' 's/export NODE_BINARY=.*/export NODE_BINARY=node/' "$SCRIPT_PATH"
            
            echo "✅ React Native打包脚本已修改"
          else
            echo "⚠️ 警告: 找不到React Native打包脚本，跳过修复"
          fi
          
          # 创建.xcode.env.local文件以确保正确的Node路径
          echo "export NODE_BINARY=$(which node)" > ios/.xcode.env.local
          echo "创建了.xcode.env.local文件: $(cat ios/.xcode.env.local)"

      - name: 列出 workspace 里的 scheme
        run: |
          cd ios
          echo "=== 工作空间和方案信息 ==="
          xcodebuild -list -workspace HomeServiceChat.xcworkspace

      - name: 执行清理构建
        run: |
          cd ios
          echo "=== 执行清理构建 ==="
          xcodebuild clean \
            -workspace HomeServiceChat.xcworkspace \
            -scheme HomeServiceChat \
            -configuration Release

      - name: 归档 Release 包（无签名）
        id: archive
        run: |
          cd ios
          echo "=== 开始归档过程 ==="
          START_TIME=$(date +%s)
          
          # 设置归档路径
          ARCHIVE_PATH="$PWD/build/HomeServiceChat.xcarchive"
          
          # 确保禁用新架构的环境变量
          export RCT_NEW_ARCH_ENABLED=0
          
          # 执行归档
          xcodebuild -workspace HomeServiceChat.xcworkspace \
            -scheme HomeServiceChat \
            -configuration Release \
            -sdk iphoneos \
            -destination 'generic/platform=iOS' \
            -archivePath "$ARCHIVE_PATH" \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            ENABLE_BITCODE=NO \
            GCC_OPTIMIZATION_LEVEL=0 \
            ONLY_ACTIVE_ARCH=NO \
            CLANG_CXX_LANGUAGE_STANDARD="c++20" \
            OTHER_CFLAGS="-DNS_BLOCK_ASSERTIONS=1" \
            RCT_NEW_ARCH_ENABLED=0 \
            RCT_FABRIC_ENABLED=0 \
            USE_FABRIC=0 \
            FABRIC_ENABLED=NO \
            GCC_PREPROCESSOR_DEFINITIONS="RCT_NEW_ARCH_ENABLED=0" \
            archive \
            -verbose \
            -showBuildTimingSummary \
            | tee build.log || { echo "❌ 构建失败"; cat build.log | tail -n 300; exit 1; }
          
          # 检查归档结果
          if [ -d "$ARCHIVE_PATH" ]; then
            END_TIME=$(date +%s)
            DURATION=$((END_TIME - START_TIME))
            echo "✅ 归档成功: 生成了 HomeServiceChat.xcarchive，耗时: ${DURATION}秒"
            ls -la $ARCHIVE_PATH
            echo "archive_duration=$DURATION" >> $GITHUB_OUTPUT
          else
            echo "❌ 归档失败: 找不到 HomeServiceChat.xcarchive"
            echo "=== 构建日志摘要（末尾） ==="
            if [ -f build.log ]; then
              tail -n 300 build.log
            fi
            exit 1
          fi

      - name: 验证构建结果
        if: success()
        run: |
          cd ios
          ARCHIVE_PATH="$PWD/build/HomeServiceChat.xcarchive"
          echo "=== 验证归档文件 ==="
          if [ -d "$ARCHIVE_PATH" ]; then
            echo "归档文件存在，大小:"
            du -sh "$ARCHIVE_PATH"
            echo "归档内容:"
            ls -la "$ARCHIVE_PATH"
          else
            echo "❌ 错误: 找不到归档文件"
            exit 1
          fi

      - name: 保存构建日志
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ env.APP_VERSION }}-${{ env.BUILD_NUMBER }}
          path: |
            ios/build.log
            ios/Pods/Pods.xcodeproj
            ios/HomeServiceChat.xcworkspace

      - name: 导出 ipa 包
        id: export-ipa
        if: success()
        run: |
          cd ios
          echo "=== 开始导出IPA ==="
          START_TIME=$(date +%s)
          
          # 归档路径和导出路径
          ARCHIVE_PATH="$PWD/build/HomeServiceChat.xcarchive"
          EXPORT_PATH="$PWD/build/ipa"
          
          # 确认导出配置文件存在
          if [ ! -f "exportOptions.plist" ]; then
            echo "❌ 错误: 找不到导出配置文件 exportOptions.plist"
            exit 1
          fi
          
          # 确保导出目录存在
          mkdir -p "$EXPORT_PATH"
          
          # 导出IPA
          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportOptionsPlist exportOptions.plist \
            -exportPath "$EXPORT_PATH" \
            -verbose \
            | tee export.log || { echo "❌ 导出失败"; cat export.log; exit 1; }
          
          # 检查导出结果
          if [ -d "$EXPORT_PATH" ] && [ "$(ls -A $EXPORT_PATH)" ]; then
            END_TIME=$(date +%s)
            DURATION=$((END_TIME - START_TIME))
            echo "✅ IPA导出成功，耗时: ${DURATION}秒"
            echo "export_duration=$DURATION" >> $GITHUB_OUTPUT
            
            # 重命名IPA文件
            cd "$EXPORT_PATH"
            IPA_FILE=$(ls *.ipa 2>/dev/null || echo "")
            if [ -n "$IPA_FILE" ]; then
              NEW_IPA_NAME="HomeServiceChat-${{ env.APP_VERSION }}-${{ env.BUILD_NUMBER }}.ipa"
              mv "$IPA_FILE" "$NEW_IPA_NAME"
              echo "✅ IPA已重命名为: $NEW_IPA_NAME"
              echo "IPA大小: $(du -h $NEW_IPA_NAME | cut -f1)"
            else
              echo "⚠️ 未找到IPA文件，无法重命名"
            fi
            
            ls -la
          else
            echo "❌ 导出失败: IPA目录为空"
            if [ -f export.log ]; then
              echo "=== 导出日志 ==="
              cat export.log
            fi
            exit 1
          fi

      - name: 收集诊断信息
        if: failure()
        run: |
          echo "=== 收集诊断信息 ==="
          echo "目录结构:"
          ls -la
          echo "iOS目录:"
          ls -la ios/
          echo "构建目录:"
          ls -la ios/build/ || echo "构建目录不存在"
          echo "最近错误日志:"
          find ios -name "*.log" -type f -mtime -1 -exec ls -la {} \; -exec echo "=== {} ===" \; -exec tail -n 50 {} \;

      - name: 上传 ipa 包
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: HomeServiceChat-${{ env.APP_VERSION }}-${{ env.BUILD_NUMBER }}
          path: ios/build/ipa/*.ipa
          
      - name: 构建摘要
        if: always()
        run: |
          echo "=== 构建摘要 ==="
          echo "构建版本: ${{ env.APP_VERSION }} (构建号: ${{ env.BUILD_NUMBER }})"
          echo "构建状态: ${{ job.status }}"
          if [ "${{ job.status }}" == "success" ]; then
            echo "归档耗时: ${{ steps.archive.outputs.archive_duration || 'N/A' }} 秒"
            echo "导出耗时: ${{ steps.export-ipa.outputs.export_duration || 'N/A' }} 秒"
            echo "IPA路径: ios/build/ipa/HomeServiceChat-${{ env.APP_VERSION }}-${{ env.BUILD_NUMBER }}.ipa"
          fi
